/*!
 * better-scroll / pull-down
 * (c) 2016-2020 ustbhuangyi
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.PullDown = factory());
}(this, function () { 'use strict';

  // ssr support
  var inBrowser = typeof window !== 'undefined';
  var ua = inBrowser && navigator.userAgent.toLowerCase();
  var isWeChatDevTools = ua && /wechatdevtools/.test(ua);
  var isAndroid = ua && ua.indexOf('android') > 0;

  var elementStyle = (inBrowser &&
      document.createElement('div').style);
  var vendor = (function () {
      if (!inBrowser) {
          return false;
      }
      var transformNames = {
          webkit: 'webkitTransform',
          Moz: 'MozTransform',
          O: 'OTransform',
          ms: 'msTransform',
          standard: 'transform'
      };
      for (var key in transformNames) {
          if (elementStyle[transformNames[key]] !== undefined) {
              return key;
          }
      }
      return false;
  })();
  function prefixStyle(style) {
      if (vendor === false) {
          return style;
      }
      if (vendor === 'standard') {
          if (style === 'transitionEnd') {
              return 'transitionend';
          }
          return style;
      }
      return vendor + style.charAt(0).toUpperCase() + style.substr(1);
  }
  var cssVendor = vendor && vendor !== 'standard' ? '-' + vendor.toLowerCase() + '-' : '';
  var transform = prefixStyle('transform');
  var transition = prefixStyle('transition');
  var hasPerspective = inBrowser && prefixStyle('perspective') in elementStyle;
  var style = {
      transform: transform,
      transition: transition,
      transitionTimingFunction: prefixStyle('transitionTimingFunction'),
      transitionDuration: prefixStyle('transitionDuration'),
      transitionDelay: prefixStyle('transitionDelay'),
      transformOrigin: prefixStyle('transformOrigin'),
      transitionEnd: prefixStyle('transitionEnd')
  };

  var ease = {
      // easeOutQuint
      swipe: {
          style: 'cubic-bezier(0.23, 1, 0.32, 1)',
          fn: function (t) {
              return 1 + --t * t * t * t * t;
          }
      },
      // easeOutQuard
      swipeBounce: {
          style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
          fn: function (t) {
              return t * (2 - t);
          }
      },
      // easeOutQuart
      bounce: {
          style: 'cubic-bezier(0.165, 0.84, 0.44, 1)',
          fn: function (t) {
              return 1 - --t * t * t * t;
          }
      }
  };

  var DEFAULT_INTERVAL = 100 / 60;
  var windowCompat = inBrowser && window;
  function noop() { }
  var requestAnimationFrame = (function () {
      if (!inBrowser) {
          /* istanbul ignore if */
          return noop;
      }
      return (windowCompat.requestAnimationFrame ||
          windowCompat.webkitRequestAnimationFrame ||
          windowCompat.mozRequestAnimationFrame ||
          windowCompat.oRequestAnimationFrame ||
          // if all else fails, use setTimeout
          function (callback) {
              return window.setTimeout(callback, (callback.interval || DEFAULT_INTERVAL) / 2); // make interval as precise as possible.
          });
  })();
  var cancelAnimationFrame = (function () {
      if (!inBrowser) {
          /* istanbul ignore if */
          return noop;
      }
      return (windowCompat.cancelAnimationFrame ||
          windowCompat.webkitCancelAnimationFrame ||
          windowCompat.mozCancelAnimationFrame ||
          windowCompat.oCancelAnimationFrame ||
          function (id) {
              window.clearTimeout(id);
          });
  })();

  var sourcePrefix = 'plugins.pullDownRefresh';
  var propertiesMap = [
      {
          key: 'finishPullDown',
          name: 'finish'
      },
      {
          key: 'openPullDown',
          name: 'open'
      },
      {
          key: 'closePullDown',
          name: 'close'
      },
      {
          key: 'autoPullDownRefresh',
          name: 'autoPull'
      }
  ];
  var propertiesProxyConfig = propertiesMap.map(function (item) {
      return {
          key: item.key,
          sourceKey: sourcePrefix + "." + item.name
      };
  });

  var PullDown = /** @class */ (function () {
      function PullDown(scroll) {
          this.scroll = scroll;
          this.pulling = false;
          if (scroll.options.pullDownRefresh) {
              this._watch();
          }
          this.scroll.registerType(['pullingDown']);
          this.scroll.proxy(propertiesProxyConfig);
      }
      PullDown.prototype._watch = function () {
          // 需要设置 probe = 3 吗？
          // must watch scroll in real time
          this.scroll.options.probeType = 3 /* Realtime */;
          this.scroll.scroller.hooks.on('end', this._checkPullDown, this);
      };
      PullDown.prototype._checkPullDown = function () {
          if (!this.scroll.options.pullDownRefresh) {
              return;
          }
          var _a = this.scroll.options
              .pullDownRefresh, _b = _a.threshold, threshold = _b === void 0 ? 90 : _b, _c = _a.stop, stop = _c === void 0 ? 40 : _c;
          // check if a real pull down action
          if (this.scroll.directionY !== -1 /* Negative */ ||
              this.scroll.y < threshold) {
              return false;
          }
          if (!this.pulling) {
              this.pulling = true;
              this.scroll.trigger('pullingDown');
              this.originalMinScrollY = this.scroll.minScrollY;
              this.scroll.minScrollY = stop;
          }
          this.scroll.scrollTo(this.scroll.x, stop, this.scroll.options.bounceTime, ease.bounce);
          return this.pulling;
      };
      PullDown.prototype.finish = function () {
          this.pulling = false;
          this.scroll.minScrollY = this.originalMinScrollY;
          this.scroll.resetPosition(this.scroll.options.bounceTime, ease.bounce);
      };
      PullDown.prototype.open = function (config) {
          if (config === void 0) { config = true; }
          this.scroll.options.pullDownRefresh = config;
          this._watch();
      };
      PullDown.prototype.close = function () {
          this.scroll.options.pullDownRefresh = false;
      };
      PullDown.prototype.autoPull = function () {
          var _a = this.scroll.options
              .pullDownRefresh, _b = _a.threshold, threshold = _b === void 0 ? 90 : _b, _c = _a.stop, stop = _c === void 0 ? 40 : _c;
          if (this.pulling) {
              return;
          }
          this.pulling = true;
          this.originalMinScrollY = this.scroll.minScrollY;
          this.scroll.minScrollY = threshold;
          this.scroll.scrollTo(this.scroll.x, threshold);
          this.scroll.trigger('pullingDown');
          this.scroll.scrollTo(this.scroll.x, stop, this.scroll.options.bounceTime, ease.bounce);
      };
      PullDown.pluginName = 'pullDownRefresh';
      return PullDown;
  }());

  return PullDown;

}));
