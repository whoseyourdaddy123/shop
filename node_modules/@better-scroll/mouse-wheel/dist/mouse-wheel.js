/*!
 * better-scroll / mouse-wheel
 * (c) 2016-2020 ustbhuangyi
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.MouseWheel = factory());
}(this, function () { 'use strict';

  function warn(msg) {
      console.error("[BScroll warn]: " + msg);
  }

  // ssr support
  var inBrowser = typeof window !== 'undefined';
  var ua = inBrowser && navigator.userAgent.toLowerCase();
  var isWeChatDevTools = ua && /wechatdevtools/.test(ua);
  var isAndroid = ua && ua.indexOf('android') > 0;

  function fixInboundValue(x, min, max) {
      if (x < min) {
          return min;
      }
      if (x > max) {
          return max;
      }
      return x;
  }

  var elementStyle = (inBrowser &&
      document.createElement('div').style);
  var vendor = (function () {
      if (!inBrowser) {
          return false;
      }
      var transformNames = {
          webkit: 'webkitTransform',
          Moz: 'MozTransform',
          O: 'OTransform',
          ms: 'msTransform',
          standard: 'transform'
      };
      for (var key in transformNames) {
          if (elementStyle[transformNames[key]] !== undefined) {
              return key;
          }
      }
      return false;
  })();
  function prefixStyle(style) {
      if (vendor === false) {
          return style;
      }
      if (vendor === 'standard') {
          if (style === 'transitionEnd') {
              return 'transitionend';
          }
          return style;
      }
      return vendor + style.charAt(0).toUpperCase() + style.substr(1);
  }
  function addEvent(el, type, fn, capture) {
      el.addEventListener(type, fn, {
          passive: false,
          capture: !!capture
      });
  }
  function removeEvent(el, type, fn, capture) {
      el.removeEventListener(type, fn, {
          capture: !!capture
      });
  }
  var cssVendor = vendor && vendor !== 'standard' ? '-' + vendor.toLowerCase() + '-' : '';
  var transform = prefixStyle('transform');
  var transition = prefixStyle('transition');
  var hasPerspective = inBrowser && prefixStyle('perspective') in elementStyle;
  var style = {
      transform: transform,
      transition: transition,
      transitionTimingFunction: prefixStyle('transitionTimingFunction'),
      transitionDuration: prefixStyle('transitionDuration'),
      transitionDelay: prefixStyle('transitionDelay'),
      transformOrigin: prefixStyle('transformOrigin'),
      transitionEnd: prefixStyle('transitionEnd')
  };
  function preventDefaultExceptionFn(el, exceptions) {
      for (var i in exceptions) {
          if (exceptions[i].test(el[i])) {
              return true;
          }
      }
      return false;
  }

  var DEFAULT_INTERVAL = 100 / 60;
  var windowCompat = inBrowser && window;
  function noop() { }
  var requestAnimationFrame = (function () {
      if (!inBrowser) {
          /* istanbul ignore if */
          return noop;
      }
      return (windowCompat.requestAnimationFrame ||
          windowCompat.webkitRequestAnimationFrame ||
          windowCompat.mozRequestAnimationFrame ||
          windowCompat.oRequestAnimationFrame ||
          // if all else fails, use setTimeout
          function (callback) {
              return window.setTimeout(callback, (callback.interval || DEFAULT_INTERVAL) / 2); // make interval as precise as possible.
          });
  })();
  var cancelAnimationFrame = (function () {
      if (!inBrowser) {
          /* istanbul ignore if */
          return noop;
      }
      return (windowCompat.cancelAnimationFrame ||
          windowCompat.webkitCancelAnimationFrame ||
          windowCompat.mozCancelAnimationFrame ||
          windowCompat.oCancelAnimationFrame ||
          function (id) {
              window.clearTimeout(id);
          });
  })();

  var EventRegister = /** @class */ (function () {
      function EventRegister(wrapper, events) {
          this.wrapper = wrapper;
          this.events = events;
          this.addDOMEvents();
      }
      EventRegister.prototype.destroy = function () {
          this.removeDOMEvents();
          this.events = [];
      };
      EventRegister.prototype.addDOMEvents = function () {
          this.handleDOMEvents(addEvent);
      };
      EventRegister.prototype.removeDOMEvents = function () {
          this.handleDOMEvents(removeEvent);
      };
      EventRegister.prototype.handleDOMEvents = function (eventOperation) {
          var _this = this;
          var wrapper = this.wrapper;
          this.events.forEach(function (event) {
              eventOperation(wrapper, event.name, _this, !!event.capture);
          });
      };
      EventRegister.prototype.handleEvent = function (e) {
          var eventType = e.type;
          this.events.some(function (event) {
              if (event.name === eventType) {
                  event.handler(e);
                  return true;
              }
              return false;
          });
      };
      return EventRegister;
  }());

  var MouseWheel = /** @class */ (function () {
      function MouseWheel(scroll) {
          this.scroll = scroll;
          this.wheelStart = false;
          scroll.registerType(['mousewheelMove', 'mousewheelStart', 'mousewheelEnd']);
          this.mouseWheelOpt = scroll.options.mouseWheel;
          this.deltaCache = [];
          this.registorEvent();
          this.hooksFn = [];
          this.registorHooks(scroll.hooks, 'destroy', this.destroy);
      }
      MouseWheel.prototype.destroy = function () {
          this.eventRegistor.destroy();
          window.clearTimeout(this.wheelEndTimer);
          window.clearTimeout(this.wheelMoveTimer);
          this.hooksFn.forEach(function (item) {
              var hooks = item[0];
              var hooksName = item[1];
              var handlerFn = item[2];
              hooks.off(hooksName, handlerFn);
          });
      };
      MouseWheel.prototype.registorEvent = function () {
          this.eventRegistor = new EventRegister(this.scroll.scroller.wrapper, [
              {
                  name: 'wheel',
                  handler: this.wheelHandler.bind(this)
              },
              {
                  name: 'mousewheel',
                  handler: this.wheelHandler.bind(this)
              },
              {
                  name: 'DOMMouseScroll',
                  handler: this.wheelHandler.bind(this)
              }
          ]);
      };
      MouseWheel.prototype.wheelHandler = function (e) {
          this.beforeHandler(e);
          // start
          if (!this.wheelStart) {
              this.wheelStartHandler(e);
              this.wheelStart = true;
          }
          // move
          var delta = this.getWheelDelta(e);
          this.wheelMove(delta);
          // end
          this.wheelStopDetactor(e, delta);
      };
      MouseWheel.prototype.wheelStartHandler = function (e) {
          this.deltaCache = [];
          this.scroll.trigger(this.scroll.eventTypes.mousewheelStart);
      };
      MouseWheel.prototype.wheelStopDetactor = function (e, delta) {
          var _this = this;
          window.clearTimeout(this.wheelEndTimer);
          var delayTime = this.mouseWheelOpt.throttle || 400;
          this.wheelEndTimer = window.setTimeout(function () {
              _this.wheelStart = false;
              window.clearTimeout(_this.wheelMoveTimer);
              _this.wheelMoveTimer = 0;
              _this.scroll.trigger(_this.scroll.eventTypes.mousewheelEnd, delta);
          }, delayTime);
      };
      MouseWheel.prototype.getWheelDelta = function (e) {
          var _a = this.mouseWheelOpt, _b = _a.speed, speed = _b === void 0 ? 20 : _b, _c = _a.invert, invert = _c === void 0 ? false : _c;
          var wheelDeltaX = 0;
          var wheelDeltaY = 0;
          var direction = invert ? -1 /* Negative */ : 1 /* Positive */;
          switch (true) {
              case 'deltaX' in e:
                  if (e.deltaMode === 1) {
                      wheelDeltaX = -e.deltaX * speed;
                      wheelDeltaY = -e.deltaY * speed;
                  }
                  else {
                      wheelDeltaX = -e.deltaX;
                      wheelDeltaY = -e.deltaY;
                  }
                  break;
              case 'wheelDeltaX' in e:
                  wheelDeltaX = (e.wheelDeltaX / 120) * speed;
                  wheelDeltaY = (e.wheelDeltaY / 120) * speed;
                  break;
              case 'wheelDelta' in e:
                  wheelDeltaX = wheelDeltaY = (e.wheelDelta / 120) * speed;
                  break;
              case 'detail' in e:
                  wheelDeltaX = wheelDeltaY = (-e.detail / 3) * speed;
                  break;
          }
          wheelDeltaX *= direction;
          wheelDeltaY *= direction;
          if (!this.scroll.scroller.scrollBehaviorY.hasScroll) {
              wheelDeltaX = wheelDeltaY;
              wheelDeltaY = 0;
          }
          if (!this.scroll.scroller.scrollBehaviorX.hasScroll) {
              wheelDeltaX = 0;
          }
          var directionX = wheelDeltaX > 0
              ? -1 /* Negative */
              : wheelDeltaX < 0
                  ? 1 /* Positive */
                  : 0;
          var directionY = wheelDeltaY > 0
              ? -1 /* Negative */
              : wheelDeltaY < 0
                  ? 1 /* Positive */
                  : 0;
          return {
              x: wheelDeltaX,
              y: wheelDeltaY,
              directionX: directionX,
              directionY: directionY
          };
      };
      MouseWheel.prototype.beforeHandler = function (e) {
          var _a = this.scroll.options, preventDefault = _a.preventDefault, stopPropagation = _a.stopPropagation, preventDefaultException = _a.preventDefaultException;
          if (preventDefault &&
              !preventDefaultExceptionFn(e.target, preventDefaultException)) {
              e.preventDefault();
          }
          if (stopPropagation) {
              e.stopPropagation();
          }
      };
      MouseWheel.prototype.wheelMove = function (delta) {
          var _this = this;
          if (this.mouseWheelOpt.debounce && this.wheelMoveTimer) {
              this.deltaCache.push(delta);
          }
          else {
              var cachedDelta = this.deltaCache.reduce(function (prev, current) {
                  return {
                      x: prev.x + current.x,
                      y: prev.y + current.y
                  };
              }, { x: 0, y: 0 });
              this.deltaCache = [];
              var newX = this.scroll.x + Math.round(delta.x) + cachedDelta.x;
              var newY = this.scroll.y + Math.round(delta.y) + cachedDelta.y;
              var scrollBehaviorX = this.scroll.scroller.scrollBehaviorX;
              var scrollBehaviorY = this.scroll.scroller.scrollBehaviorY;
              newX = fixInboundValue(newX, scrollBehaviorX.maxScrollPos, scrollBehaviorX.minScrollPos);
              newY = fixInboundValue(newY, scrollBehaviorY.maxScrollPos, scrollBehaviorY.minScrollPos);
              if (!this.scroll.trigger(this.scroll.eventTypes.mousewheelMove, {
                  x: newX,
                  y: newY
              })) {
                  var easeTime = this.getEaseTime();
                  if (newX !== this.scroll.x || newY !== this.scroll.y) {
                      this.scroll.scrollTo(newX, newY, easeTime);
                  }
              }
              if (this.mouseWheelOpt.debounce) {
                  this.wheelMoveTimer = window.setTimeout(function () {
                      _this.wheelMoveTimer = 0;
                  }, this.mouseWheelOpt.debounce);
              }
          }
      };
      MouseWheel.prototype.registorHooks = function (hooks, name, handler) {
          hooks.on(name, handler, this);
          this.hooksFn.push([hooks, name, handler]);
      };
      MouseWheel.prototype.getEaseTime = function () {
          var DEFAULT_EASETIME = 300;
          var SAFE_EASETIME = 100;
          var easeTime = this.mouseWheelOpt.easeTime || DEFAULT_EASETIME;
          // scrollEnd event will be triggered in every calling of scrollTo when easeTime is too small
          // easeTime needs to be greater than 100
          if (easeTime < SAFE_EASETIME) {
              warn("easeTime should be greater than 100.\n      If mouseWheel easeTime is too small, scrollEnd will be triggered many times.");
          }
          return easeTime;
      };
      MouseWheel.pluginName = 'mouseWheel';
      MouseWheel.applyOrder = "pre" /* Pre */;
      return MouseWheel;
  }());

  return MouseWheel;

}));
